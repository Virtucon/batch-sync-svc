You are a senior Java Spring Boot engineer working on a scalable backend that ingests audio metadata. The system already supports /transcriptions and now needs an additional endpoint to support enrichments. Please extend the application accordingly.

🔧 New Functionality Overview
Add a second endpoint:

POST /enrichments
Defined in a new controller: EnrichmentController

Accepts a new JSON payload (structure below)

Ingests and stores the payload in the existing schema (via schema update, no new Liquibase migration)

Uses the same audio_quality_metric structure already present in transcriptions

Introduces a common base API response format used by both controllers

📦 Enrichment JSON Payload
{
  "call_id": "550e8400-e29b-41d4-a716-446655440000",
  "audio_quality_metric": {
    "audio_duration_min": 4.3,
    "audio_sample_rate": 8000,
    "spectral_centroids_left": 1061.35,
    "spectral_centroids_right": 1059.87,
    "spectral_rolloff_left": 0.95,
    "spectral_rolloff_right": 0.94,
    "spectral_bandwidth_left": 0.15,
    "spectral_bandwidth_right": 0.14,
    "loudness_rms_db_left": -30.5,
    "loudness_rms_db_right": -31.0,
    "loudness_peak_db_left": -20.0,
    "loudness_peak_db_right": -21.0,
    "loudness_dynamic_range_db_left": 10.5,
    "loudness_dynamic_range_db_right": 10.0,
    "loudness_volume_balance_left_minus_right_db": -4.93,
    "activity_snr_db_left": 46.32,
    "activity_snr_db_right": 45.87,
    "activity_snr_db_average": 46.1,
    "activity_speech_duration_min_left": 3.5,
    "activity_speech_duration_min_right": 3.45,
    "activity_silence_duration_min_left": 0.8,
    "activity_silence_duration_min_right": 0.85,
    "activity_speech_ratio_left": 0.81,
    "activity_speech_ratio_right": 0.8,
    "activity_speech_overlap_duration_sec": 68.55,
    "activity_both_silence_duration_sec": 12.45,
    "activity_num_silence_periods": 34.23,
    "activity_avg_silence_duration_sec": 0.36,
    "activity_max_silence_duration_sec": 1.2,
    "conversation_num_turns_left": 12.32,
    "conversation_num_turns_right": 11.78,
    "conversation_num_turns_total": 24.1,
    "conversation_avg_gap_between_turns": 2.5,
    "conversation_turn_balance_left": 0.52,
    "conversation_turn_balance_right": 0.48
  },
  "run_config_id": "123e4567-e89b-12d3-a456-426614174000",
  "sentences": [
    {
      "idx": 0,
      "text": "Hello.",
      "emotion": "neutral",
      "emotion_score": 0.98,
      "speaker": "Customer",
      "start": 0.0,
      "end": 12.62,
      "asr_confidence": [0.97],
      "diarisation_confidence": ["high"]
    },
    {
      "idx": 1,
      "text": "Hello. Can I speak to [REDACTED] please?",
      "emotion": "neutral",
      "emotion_score": 0.76,
      "speaker": "Agent",
      "start": 12.63,
      "end": 24.45,
      "asr_confidence": [0.96, 0.95, 0.94, 0.93, 0.92, 0.91, 0.9],
      "diarisation_confidence": ["medium", "medium", "high", "high", "high", "medium", "medium"]
    },
    {
      "idx": 2,
      "text": "Can I take a message? He's in the shower.",
      "emotion": "surprise",
      "emotion_score": 0.45,
      "speaker": "Customer",
      "start": 24.46,
      "end": 36.78,
      "asr_confidence": [0.95, 0.94, 0.93, 0.92, 0.91, 0.9, 0.89, 0.88, 0.87],
      "diarisation_confidence": ["high", "high", "medium", "medium", "medium", "medium", "low", "low", "low"]
    },
    {
      "idx": 3,
      "text": "Speak to you Thursday.",
      "emotion": "neutral",
      "emotion_score": 0.85,
      "speaker": "Agent",
      "start": 36.79,
      "end": 48.12,
      "asr_confidence": [0.96, 0.95, 0.94, 0.93],
      "diarisation_confidence": ["high", "medium", "medium", "low"]
    }
  ],
  "generated_at": "2025-07-17T10:15:30Z"
}


🧠 Implementation Requirements
1. Extend Existing Schema
Update the existing Liquibase schema migration (e.g., V1__create_schema.sql) to support storing enrichments.

Add enrichment and sentence tables as part of the original schema definition.

Ensure relationships to existing audio_quality_metric (if reused) are clear.

2. New Controller
EnrichmentController exposes POST /enrichments

Accepts the JSON, maps to DTOs

Returns a standardized API response

3. DTOs
EnrichmentDTO

Contains: call_id, run_config_id, audio_quality_metric, sentences, generated_at

SentenceDTO

idx, text, emotion, emotion_score, speaker, start, end, asr_confidence (List<Double>), diarisation_confidence (List<String>)

4. Entities
Enrichment

One-to-many with Sentence

One-to-one or shared relation with AudioQualityMetric (reused from transcription if desired)

Sentence

Stored as a separate table

Each sentence belongs to one enrichment

5. Common API Response
Create a generic response wrapper used in both TranscriptionController and EnrichmentController.

java
Copy
Edit
public class ApiResponse<T> {
    private boolean success;
    private String message;
    private T data;
}
All endpoints return this format.

On success:

json
Copy
Edit
{
  "success": true,
  "message": "Enrichment saved successfully.",
  "data": { /* optional DTO data or ID */ }
}
6. Mapper / Builder
Map EnrichmentDTO to Enrichment entity

Can use MapStruct or manual EnrichmentBuilder

7. Service Layer
Interface: EnrichmentService

Implementation: EnrichmentServiceImpl

Business logic to save enrichment and child sentences

8. Repository Layer
EnrichmentRepository extends JpaRepository<Enrichment, UUID>

SentenceRepository extends JpaRepository<Sentence, UUID>

🗃️ Persistence + Config
No new migration file: schema changes must be added directly to V1__create_schema.sql

Ensure PostgreSQL config remains valid in application.properties

Schema bootstraps with the app

🐳 Docker
PostgreSQL container reused from the existing docker-compose.yml

No changes unless enriching tables require new ports, volumes, or configs

✅ Output Instructions
Please return the implementation plan in markdown, using the following structure:

📁 Project Structure
bash
Copy
Edit
src/
 └── main/
     ├── java/com/example/
     │   ├── controller/
     │   │   ├── EnrichmentController.java
     │   │   └── TranscriptionController.java
     │   ├── dto/
     │   │   ├── EnrichmentDTO.java
     │   │   ├── SentenceDTO.java
     │   │   └── AudioQualityMetricDTO.java
     │   ├── entity/
     │   │   ├── Enrichment.java
     │   │   ├── Sentence.java
     │   │   └── AudioQualityMetric.java
     │   ├── mapper/
     │   │   └── EnrichmentBuilder.java
     │   ├── service/
     │   │   ├── EnrichmentService.java
     │   │   └── impl/EnrichmentServiceImpl.java
     │   ├── repository/
     │   │   ├── EnrichmentRepository.java
     │   │   └── SentenceRepository.java
     │   └── response/
     │       └── ApiResponse.java
     ├── resources/
     │   └── db/
     │       └── changelog/
     │           ├── db.changelog-master.xml
     │           └── V1__create_schema.sql
 └── test/
     └── ...
✅ Summary
You're extending the app to support enrichment data ingestion with:

A new /enrichments endpoint

Matching DTOs/entities/services

A shared audio metric model (reused)

A common base API response format

Schema changes incorporated directly into the original Liquibase migration